// integer.proto - 定义整数类型的消息

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.29.2
// source: integer.proto

package protov1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NumberTypes struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 变长编码整数 - 适用于较小的正数
	UserId    int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户ID，通常是正数
	Timestamp int64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`         // 时间戳
	// ZigZag 编码 - 适用于可能为负数的场景
	Temperature int32 `protobuf:"zigzag32,3,opt,name=temperature,proto3" json:"temperature,omitempty"` // 温度，可能为负数
	Balance     int64 `protobuf:"zigzag64,4,opt,name=balance,proto3" json:"balance,omitempty"`         // 账户余额，可能为负数
	// 无符号整数 - 确保非负值
	Count    uint32 `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`                       // 计数，总是非负
	FileSize uint64 `protobuf:"varint,6,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"` // 文件大小
	// 固定长度 - 适用于大数值或需要固定宽度的场景
	Ipv4Address      uint32 `protobuf:"fixed32,7,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`                 // IPv4 地址
	UniqueId         uint64 `protobuf:"fixed64,8,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`                          // 全局唯一ID
	CoordinateX      int32  `protobuf:"fixed32,9,opt,name=coordinate_x,json=coordinateX,proto3" json:"coordinate_x,omitempty"`                 // 坐标值
	PreciseTimestamp int64  `protobuf:"fixed64,10,opt,name=precise_timestamp,json=preciseTimestamp,proto3" json:"precise_timestamp,omitempty"` // 高精度时间戳
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *NumberTypes) Reset() {
	*x = NumberTypes{}
	mi := &file_integer_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NumberTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumberTypes) ProtoMessage() {}

func (x *NumberTypes) ProtoReflect() protoreflect.Message {
	mi := &file_integer_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumberTypes.ProtoReflect.Descriptor instead.
func (*NumberTypes) Descriptor() ([]byte, []int) {
	return file_integer_proto_rawDescGZIP(), []int{0}
}

func (x *NumberTypes) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *NumberTypes) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *NumberTypes) GetTemperature() int32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *NumberTypes) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *NumberTypes) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *NumberTypes) GetFileSize() uint64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *NumberTypes) GetIpv4Address() uint32 {
	if x != nil {
		return x.Ipv4Address
	}
	return 0
}

func (x *NumberTypes) GetUniqueId() uint64 {
	if x != nil {
		return x.UniqueId
	}
	return 0
}

func (x *NumberTypes) GetCoordinateX() int32 {
	if x != nil {
		return x.CoordinateX
	}
	return 0
}

func (x *NumberTypes) GetPreciseTimestamp() int64 {
	if x != nil {
		return x.PreciseTimestamp
	}
	return 0
}

var File_integer_proto protoreflect.FileDescriptor

var file_integer_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0a, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x22, 0xc3, 0x02, 0x0a, 0x0b,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x12, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x5f,
	0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x58, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x10, 0x52,
	0x10, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x2a, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6c, 0x69, 0x6e, 0x32, 0x31, 0x31, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_integer_proto_rawDescOnce sync.Once
	file_integer_proto_rawDescData = file_integer_proto_rawDesc
)

func file_integer_proto_rawDescGZIP() []byte {
	file_integer_proto_rawDescOnce.Do(func() {
		file_integer_proto_rawDescData = protoimpl.X.CompressGZIP(file_integer_proto_rawDescData)
	})
	return file_integer_proto_rawDescData
}

var file_integer_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_integer_proto_goTypes = []any{
	(*NumberTypes)(nil), // 0: integer.v1.NumberTypes
}
var file_integer_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_integer_proto_init() }
func file_integer_proto_init() {
	if File_integer_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_integer_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_integer_proto_goTypes,
		DependencyIndexes: file_integer_proto_depIdxs,
		MessageInfos:      file_integer_proto_msgTypes,
	}.Build()
	File_integer_proto = out.File
	file_integer_proto_rawDesc = nil
	file_integer_proto_goTypes = nil
	file_integer_proto_depIdxs = nil
}
